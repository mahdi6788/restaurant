//User: Stores customer and admin information
//MenuItem: Represents food items with prices and categories
//Category: Organizes menu items (e.g., "Appetizers", "Main Course")
//Order: Tracks customer orders
//OrderItem: Connects orders to specific menu items with quantities

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                   @id @default(uuid())
  email                     String?                  @unique    
  name                      String?     
  password                  String?      
  address                   String?      
  phone                     String? 
  image                     String?
  emailVerified             DateTime?
  isTwoFactorEnabled        Boolean                   @default(false)
  twoFactorConfirmation     TwoFactorConfirmation?  
  accounts                  Account[]     
  sessions                  Session[]     
  role                      Role                      @default(CUSTOMER)
  orders                    Order[]     
  cart                      Cart?     
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}

model Account {
  id                        String        @id @default(uuid())
  userId                    String      
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                      String      
  provider                  String      
  providerAccountId         String      
  refresh_token             String?       @db.Text
  access_token              String?       @db.Text
  expires_at                Int?      
  token_type                String?     
  scope                     String?     
  id_token                  String?       @db.Text
  session_state             String?

  @@unique([provider, providerAccountId])
}

model Session {
  id                        String   @id @default(uuid())
  sessionToken              String   @unique
  userId                    String
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires                   DateTime
}

model MenuItem {
  id                        String      @id @default(uuid())
  name                      String
  description               String?
  price                     Float
  category                  Category    @default(MainCourse)
  imageUrl                  String?
  isAvailable               Boolean?     @default(true)
  cartItems                 CartItem[]                    // Relation to cart items
  orderItems                OrderItem[]                   // Relation to order items
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
}

enum Category {
  MainCourse
  Appetizers
  Drink
}

model Order {
  id                      String      @id @default(uuid())
  user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  items                   OrderItem[]
  total                   Float
  status                  OrderStatus @default(PENDING)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  address                 String
  paymentId               String?
}

model OrderItem {
  id                      String   @id @default(uuid())
  order                   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId                 String
  menuItem                MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId              String
  quantity                Int
  price                   Float    // Price at time of order
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Cart {
  id                      String     @id @default(uuid())
  user                    User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String?     @unique        
  items                   CartItem[]
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
}

model CartItem {
  id                      String   @id @default(uuid())
  cart                    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId                  String
  menuItem                MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId              String
  quantity                Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model verificationToken {
  id                      String  @id @default(uuid())
  email                   String
  token                   String  @unique
  expires                 DateTime

  @@unique([email, token])
}
model passwordResetToken {
  id                       String  @id @default(uuid())
  email                    String
  token                    String  @unique
  expires                  DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                      String  @id @default(uuid())
  email                   String
  token                   String  @unique
  expires                 DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                      String      @id @default(uuid())
  userId                  String
  user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}