// Type Safety: Zod ensures the input matches your schema, and TypeScript infers the types from Zod schemas, reducing runtime errors.
// Validation: Zod provides detailed error messages for invalid inputs.
// NOTE: don’t include imageUrl in the schema because it’s generated by Cloudinary after the upload, not provided by the client.

import { z } from "zod";

const RoleEnum = z.enum(["CUSTOMER", "ADMIN"]);
const CategoryEnum = z.enum(["MainCourse", "Appetizers", "Drink"]);
const OrderStatusEnum = z.enum([
  "PENDING",
  "PROCESSING",
  "COMPLETED",
  "CANCELLED",
]);

export const userSchema = z.object({
  name: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email address"),
  password: z.string().min(6, "Password must be at least 6 characters"),
  role: RoleEnum.default("CUSTOMER"),
});

export const MenuSchema = z.object({
  farsiName: z.string().min(1, "name is required"),
  farsiDescription: z
    .string()
    .min(1, "description is required")
    .max(50, "description must be less than 50 characters").optional(),
  englishName: z.string().min(1, "name is required"),
  englishDescription: z
    .string()
    .min(1, "description is required")
    .max(50, "description must be less than 50 characters"),
  price: z.coerce.number().gt(0, "price must be greater than 0").optional(),
  category: CategoryEnum.default("MainCourse"),
  isAvailable: z.boolean().default(true).optional(),
});

export const orderItemSchema = z.object({
  menuItemId: z.string().uuid("Invalid menu item ID"),
  quantity: z.number().int().positive("Quantity must be a positive number"),
  priceAtOrderTime: z.number().positive("price must be greater than 0"),
});

export const orderSchema = z.object({
  userId: z.string().uuid("Invalid user ID"),
  items: z.array(orderItemSchema).min(1, "At least one item is required"),
  totalAmount: z.number().positive("Total must be positive"),
  status: OrderStatusEnum.default("PENDING"),
  deliveryAddress: z.string().min(1, "Delivery address is required"),
  paymentId: z.string().optional(),
});

export const cartItemSchema = z.object({
  menuItemId: z.string().uuid("Invalid menu item ID"),
  quantity: z.number().int().positive("Quantity must be a positive integer"),
});

/// cartSchema is used when initializing or fetching a cart.
/// Unlike orderSchema, the cart doesn’t require fields like total or address
/// because those are only relevant at checkout.
export const cartSchema = z.object({
  userId: z.string().uuid("Invalid user ID"),
  items: z.array(cartItemSchema).optional(),
});

// addToCartSchema is for adding or updating individual items in the cart.
export const addToCartSchema = z.object({
  menuItemId: z.string().uuid("Invalid menu item ID"),
  quantity: z
    .number()
    .int()
    .positive("Quantity must be a positive integer")
    .default(1),
});

export const checkoutSchema = z.object({
  userId: z.string().uuid("Invalid user ID"),
  address: z.string().min(1, "Address is required"),
  phone: z.string().min(5, { message: "Phone number is required" }),
  total: z.number().positive("Total must be positive"),
});

export const registerFormSchema = z.object({
  name: z.string().min(1, { message: "Name is required" }),
  email: z.string().email({ message: "Invalid email address" }),
  password: z
    .string()
    .min(8, { message: "Password must be at least 8 characters long" }),
  confirmPassword: z
    .string()
    .min(8, { message: "Password must be at least 8 characters long" }),
  address: z.string().min(1, { message: "Address is required" }),
  phone: z.string().min(5, { message: "Phone number is required" }),
});

// Type inference for TypeScript
export type UserInput = z.infer<typeof userSchema>;
export type MenuItemInput = z.infer<typeof MenuSchema>;
export type OrderItemInput = z.infer<typeof orderItemSchema>;
export type OrderInput = z.infer<typeof orderSchema>;
export type CartInput = z.infer<typeof cartSchema>;
export type CartItemInput = z.infer<typeof cartItemSchema>;
export type CheckoutInput = z.infer<typeof checkoutSchema>;
export type AddToCartInput = z.infer<typeof addToCartSchema>;
